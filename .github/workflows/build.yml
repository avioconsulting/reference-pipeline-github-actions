name: Maven Build and Deploy

on:
  push:
    branches:
      - 'master'
      - 'development'
      - 'feature/**'
  pull_request:
    branches:
      - 'master'
      - 'development'

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.2
        with:
          maven-version: 3.6.1

      - name: Create settings xml
        uses: whelk-io/maven-settings-xml-action@v18
        with:
          servers: >
            [
              {
                "id": "avio-repository",
                "username": "${{secrets.NEXUS_USER}}",
                "password": "${{secrets.NEXUS_PASSWORD}}"
              }
            ]
          mirrors: >
            [
              {
                "id": "avio-repository",
                "mirrorOf": "mulesoft-ee-releases",
                "url": "https://devops.avioconsulting.com/nexus/repository/mulesoft-ee-releases/"
              }
            ]

      - name: Cache for maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Append Github run_id
        run: |
          mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}-${{ github.run_id }} -DprocessAllModules versions:commit

      - name: Set Version
        id: set-version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)

      - name: Print Version
        run: echo "Version ${{ steps.set-version.outputs.version }}"

      - name: Compile
        run: mvn compile

      - name: Verify
        run: mvn --batch-mode verify

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: ./**/surefire-reports/*.xml

      - name: Publish package
        if: github.event_name != 'pull_request'
        run: mvn --batch-mode deploy -DskipTests -X
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}

      - name: Perform Release
        if: ${{ github.event_name != 'pull_request' && github.ref == 'development' }}
        run: echo "Releasing version ${{ steps.set-version.outputs.version }}"

      - name: Perform Release
        if: ${{ github.event_name != 'pull_request' && github.ref == 'development'  }}
        env:
          GIT_USER: ${{ secrets.GIT_USER }}
          GIT_PASSWORD: ${{ secrets.GIT_TOKEN }}
        run: |
          git config --local credential.helper "!f() { echo username=\\GIT_USER; echo password=\\$GIT_PASSWORD; }; f"
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER }}"
          git tag -a v${{ steps.set-version.outputs.version }} -m "Version ${{ steps.set-version.outputs.version }}"
          mvn clean build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} -DprocessAllModules versions:commit
          find . -name 'pom.xml' | xargs git add
          git commit -m "Incrementing to next patch version"
          git push --follow-tags

# Uncomment this section once we decide how we're going to do release notes
#      
#      - name: Add Release Note and Create Github Release
#        if: ${{ !contains(steps.set-version.outputs.version, 'SNAPSHOT') && github.event_name != 'pull_request' }}
#        uses: release-drafter/release-drafter@v5
#        with:
#          version: ${{ steps.set-version.outputs.version }}
#          tag: v${{ steps.set-version.outputs.version }}
#          publish: true
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-dev:
    needs: Build
    environment: 'Development'
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.2
      with:
        maven-version: 3.6.1
    
    - name: Create settings xml
        uses: whelk-io/maven-settings-xml-action@v18
        with:
          servers: >
            [
              {
                "id": "avio-repository",
                "username": "${{secrets.NEXUS_USER}}",
                "password": "${{secrets.NEXUS_PASSWORD}}"
              }
            ]
          mirrors: >
            [
              {
                "id": "avio-repository",
                "mirrorOf": "mulesoft-ee-releases",
                "url": "https://devops.avioconsulting.com/nexus/repository/mulesoft-ee-releases/"
              }
            ]

      - name: Cache for maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven  

    - name: Publish
      run: |
        echo "Publish to dev env"
        mvn clean package mule:deploy -DmuleVersion=4.3.0 -Danypoint.username=${{ secrets.ANYPOINT_USER }} -Danypoint.password=${{ secrets.ANYPOINT_PASSWORD }} -Dmule.app.name=test-hello-world-api -DanypointGroupId=${{ secrets.ANYPOINT_GROUP_ID }} -Denv=DEV -Danypoint.platform.client_id=${{ secrets.ANYPOINT_CLIENT_ID }} -Danypoint.platform.client_secret=${{ secrets.ANYPOINT_CLIENT_SECRET }} -DcloudhubWorkers=1 -DcloudhubWorkerType=Micro

  publish-to-prod:
    needs: [Build,publish-to-dev]
    environment: 'Production'
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.2
      with:
        maven-version: 3.6.1

    - name: Create settings xml
        uses: whelk-io/maven-settings-xml-action@v18
        with:
          servers: >
            [
              {
                "id": "avio-repository",
                "username": "${{secrets.NEXUS_USER}}",
                "password": "${{secrets.NEXUS_PASSWORD}}"
              }
            ]
          mirrors: >
            [
              {
                "id": "avio-repository",
                "mirrorOf": "mulesoft-ee-releases",
                "url": "https://devops.avioconsulting.com/nexus/repository/mulesoft-ee-releases/"
              }
            ]

      - name: Cache for maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

    - name: Publish
      run: |
        echo "Publish to prod env"
        mvn clean package mule:deploy -DmuleVersion=4.3.0 -Danypoint.username=${{ secrets.ANYPOINT_USER }} -Danypoint.password=${{ secrets.ANYPOINT_PASSWORD }} -Dmule.app.name=test-hello-world-api -DanypointGroupId=${{ secrets.ANYPOINT_GROUP_ID }} -Denv=DEV -Danypoint.platform.client_id=${{ secrets.ANYPOINT_CLIENT_ID }} -Danypoint.platform.client_secret=${{ secrets.ANYPOINT_CLIENT_SECRET }} -DcloudhubWorkers=1 -DcloudhubWorkerType=Micro